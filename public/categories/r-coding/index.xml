<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R coding on Christian Ryan</title>
    <link>/categories/r-coding/</link>
    <description>R coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="/categories/r-coding/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using tidytext to compare samples of dreams</title>
      <link>/post/using-tidytext-to-compare-samples-of-dreams/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/using-tidytext-to-compare-samples-of-dreams/</guid>
      <description>


&lt;p&gt;This is the third post in the series exploring text analytics with data from the dreambank.com. In the first post ‘Pulling text data from the internet’, I demonstrated how to use the &lt;strong&gt;rvest&lt;/strong&gt; package to pull text data from the dreambank website. In the second post ‘Manipulating text data from dreams’ we saw how to turn the dream texts into a tidy format by unnesting the word tokens in each dream and running counts on the word frequencies. In this third post of the series, I am going to demonstrate some ways of comparing texts from Julia Silge and David Robinson’s book &lt;strong&gt;Text Mining with R - A tidy approach&lt;/strong&gt; using the dream data set to illustrate the ideas, while also unpacking some of the steps a little further than in their book.&lt;/p&gt;
&lt;p&gt;We will load our packages again and pull in the same data we analysed last time (see the previous post for details).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidytext)
library(stringr)
library(car)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The processing steps we used last time on the data was to add a dream number, unnest the tokens, remove stopwords, and then filter out underscores and digits.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word &amp;lt;- df %&amp;gt;%
  mutate(dream_number = row_number()) %&amp;gt;%
  unnest_tokens(word, dream) %&amp;gt;%
  anti_join(stop_words) %&amp;gt;%
  filter(str_detect(word, pattern = &amp;quot;_&amp;quot;, negate = TRUE)) %&amp;gt;%
  filter(str_detect(word, pattern = &amp;#39;[\\d]&amp;#39;, negate = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we calculated word frequencies as proportions. This time we will store this as a new dataframe called df_proportion. Notice we have to remove the temporary ‘n’ variable. I am not sure why this is, but if you don’t deselect it, it seems to mess with the spread() function, creating multiple rows for the same word.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_proportion &amp;lt;- df_word %&amp;gt;%
  group_by(sample, word) %&amp;gt;%
  summarise(n = n()) %&amp;gt;%
  mutate(percent = (n / sum(n))*100) %&amp;gt;%
  mutate(percent = round(percent, 2)) %&amp;gt;%
  select(-n) %&amp;gt;%
  arrange(desc(percent)) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;comparing-word-frequencies-across-samples&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comparing word frequencies across samples&lt;/h1&gt;
&lt;p&gt;We might want to compare the frequencies across samples. We can use a technique that Juile Silge and David Robinson used to compare word frequencies across authors. This is a clever trick in which they use the &lt;em&gt;spread()&lt;/em&gt; and &lt;em&gt;gather()&lt;/em&gt; functions. Spread gives each sample their own column and makes the value proportion. Rather than do the spread and gather in one code chuck as in the book, I will do them as two separate stages to illustrate the process in more detail.&lt;/p&gt;
&lt;p&gt;So let’s spread the data first. Think of this as taking the column of percentages/proportions and moving it into four separate columns: one for each sample. We are passing two arguments to the &lt;em&gt;spread()&lt;/em&gt; function, the key (which contains the names of the items to form new columns) which is our ‘sample’ variable, and the value (what will the cells in each of these columns be filled with), which is the variable ‘percent’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_spread &amp;lt;- df_proportion %&amp;gt;%
  spread(sample, percent)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could look at this new dataframe directly by clicking on the icon in the Global Environment, but you will notice lots of NA values. This is because each dream sample contains words that are unique to that sample and in a way these are the least informative - we can only make a binary comparison if one sample contains the word and the other does not. So we really want to see the variance in proportions for words that occur in more than one sample. To take a better look at these examples we can run our new dataframe called df_spread through a !is.na (is not NA) filter and then call the &lt;em&gt;some()&lt;/em&gt; function from the &lt;strong&gt;car&lt;/strong&gt; package. This is simply filtering out the rows in which the NA value occurs for the proportion of a word in any of our four samples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_spread %&amp;gt;%
  filter(!is.na(college_women) &amp;amp; !is.na(hall_female) &amp;amp; !is.na(hall_male) &amp;amp; !is.na(vietnam_vet)) %&amp;gt;%
  some()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 5
##    word    college_women hall_female hall_male vietnam_vet
##    &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 bad             0.06        0.02       0.02        0.06
##  2 father          0.43        0.570      0.28        0.05
##  3 glass           0.15        0.02       0.05        0.13
##  4 grass           0.06        0.07       0.02        0.03
##  5 hit             0.12        0.07       0.21        0.03
##  6 leaving         0.06        0.02       0.16        0.05
##  7 mine            0.52        0.37       0.47        0.09
##  8 road            0.06        0.1        0.33        0.16
##  9 sitting         0.580       0.47       0.35        0.14
## 10 staying         0.06        0.1        0.02        0.05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the next step is to decide which sample is going to be our reference sample. This will have its column of frequencies replicated and stacked so that each of the other samples can be compared with it. When we &lt;em&gt;gather()&lt;/em&gt;, we only include the samples to compare with the reference and not the reference itself. For simplicity, we can use the first column in our df (college_women) as our reference group and compare the other three samples to this. We might predict at this point that the hall_women will have the most similar dreams and then the hall_men, with the vietnam_vet being the most different. We can check this prediction later on when we run some correlation coefficients.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_gather &amp;lt;- df_spread %&amp;gt;%
  gather(sample, proportion, hall_female:vietnam_vet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can take a quick look at the structure of the output, but we will filter out the NA values first, as we did for the df_spread dataset, as many are created for words that appear in one sample of dreams but not the other. Notice we do the same not-NA process (!is.na) on both the college_women data and the “proportion” variable. Remember that the college_women are our reference sample, so the ‘sample’ in this case tells us who provide the data in the proportion column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_gather %&amp;gt;%
  filter(!is.na(college_women) &amp;amp; !is.na(proportion))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,950 x 4
##    word     college_women sample      proportion
##    &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;
##  1 accident          0.03 hall_female       0.02
##  2 act               0.06 hall_female       0.05
##  3 afraid            0.24 hall_female       0.1 
##  4 age               0.61 hall_female       0.27
##  5 aged              0.09 hall_female       0.02
##  6 ages              0.03 hall_female       0.05
##  7 ago               0.12 hall_female       0.15
##  8 ahead             0.06 hall_female       0.02
##  9 air               0.15 hall_female       0.02
## 10 alarm             0.09 hall_female       0.02
## # … with 1,940 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we can graph this data to inspect it more effectively. We use the df_gather as our data and set the aesthetics for x and y to proportion (which are our three samples) and college_women - which is our reference sample. As the college_women data will be used in all three graphs, it makes sense to assign it to the y axis, so we can scan down all three graphs vertically to make comparisons. There is another clever trick here with the colour variable. We will set it to the absolute value - &lt;em&gt;abs()&lt;/em&gt; - of the difference between the college_women value and the other sample (proportion) value. This means that the darker the colour of the dot, the stronger the difference between the two proportion values. This allows us to use both shade (dark to light) and position away from the diagonal line as a measure of difference between samples. The paler the text the more similar the proportion use of the word in both samples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(scales)

ggplot(df_gather, aes(x = proportion, y = college_women,
                 colour = abs(college_women - proportion)))+
  geom_abline(colour = &amp;quot;gray40&amp;quot;, lty = 2)+
  geom_jitter(alpha = 0.2, size = 2, width = 0.3, height = 0.3) +
  geom_text(aes(label = word), check_overlap = TRUE, vjust = 2)+
  scale_x_log10(labels = percent_format())+
  scale_y_log10(labels = percent_format())+
  scale_color_gradient(limits = c(0, 0.22),
                       low = &amp;quot;grey&amp;quot;, high = &amp;quot;black&amp;quot;)+
  facet_wrap(~sample, ncol = 1)+
  theme(legend.position = &amp;quot;none&amp;quot;)+
  labs(y = &amp;quot;college_women&amp;quot;, x = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2020-01-27-using-tidytext-to-compare-samples-of-dreams_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The words on or close to the line represent words that occurred at similar frequencies in both samples. As an example, we can see the word ‘remember’ occurred at high frequency in the first graph, in both the college_women and hall_female samples, as it is both high up and far to the right on the graph - but we can also observe that the closeness to the line suggests a similar frequency between the samples. In contrast, we can see on the same graph that the word “aunt” is quite far to the left of the line, indicating that it occurs more frequently in the college_women than the hall_women. This is also the case in the graph of college_women against hall_men, whereas this is not obvious in the final graph. It is possible that the word doesn’t occur at all in the vietnam_vet dream - therefore it would have been removed by graph function call. We can check the values for ‘aunt’ with a quick call of the df_spread data.frame (this is why it can be useful to keep both versions, rather than overwriting the data when we used the gather function).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_spread %&amp;gt;%
  filter(word == &amp;quot;aunt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   word  college_women hall_female hall_male vietnam_vet
##   &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 aunt           0.43        0.02      0.02          NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we predicted, the lack of ‘aunt’ in the final graph was not due to a similar frequency between the samples, but rather the complete absence of the word in the vietnam_vet dreams. We can also see the size of difference between the frequency of the word in the college_women’s dreams and the other three samples is very large. Graphing the words in this way can give you a strong sense of these differences between the texts.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;correlation-coefficient&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Correlation coefficient&lt;/h1&gt;
&lt;p&gt;We can use the base R function cor.test() to measure the degree of similarity between the propotions of words used in each sample. One approach is to prepare a new dataframe to carry out this test. Here we create a dataframe called df_cwhf(college_women and hall_female) and filter for just those rows that represent data for college women and hall_females. We can then run the &lt;em&gt;cor.test()&lt;/em&gt; on this dataframe, by passing the variables ‘college_women’ and ‘proportion’ - the latter being just the proportion for the hall_female (because of the filter we applied).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_cwhf &amp;lt;- df_gather %&amp;gt;%
  filter(sample == &amp;quot;hall_female&amp;quot;)
cor.test(df_cwhf$college_women, df_cwhf$proportion)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  df_cwhf$college_women and df_cwhf$proportion
## t = 34.676, df = 643, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.7785169 0.8325231
## sample estimates:
##       cor 
## 0.8072027&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, we could use the syntax in &lt;strong&gt;Text mining with R&lt;/strong&gt;, which subsets the data on the fly. We explicitly give a data argument, which is the df_gather dataframe, subsetted with &lt;em&gt;samples == “hall_female”&lt;/em&gt;. We add a comma after this in the square brackets &lt;strong&gt;[ ]&lt;/strong&gt;, with no other argument, as we want to retain all the columns. Finally we provide our x and y values to be correlated in the formula format &lt;strong&gt;~ x + y&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(data = df_gather[df_gather$sample == &amp;quot;hall_female&amp;quot;, ], ~ proportion + college_women)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  proportion and college_women
## t = 34.676, df = 643, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.7785169 0.8325231
## sample estimates:
##       cor 
## 0.8072027&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s use this one-line technique to run the other two comparisons.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(data = df_gather[df_gather$sample == &amp;quot;hall_male&amp;quot;, ], ~ proportion + college_women)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  proportion and college_women
## t = 28.24, df = 648, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.7062132 0.7753868
## sample estimates:
##       cor 
## 0.7427756&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(data = df_gather[df_gather$sample == &amp;quot;vietnam_vet&amp;quot;, ], ~ proportion + college_women)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  proportion and college_women
## t = 12.03, df = 653, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.3610922 0.4866471
## sample estimates:
##      cor 
## 0.425918&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This reveals that all three samples correlate highly with the college_women, but the vietnam_vet dreams had a much lower correlation (.43) than the hall_female (.81) or the hall_male (.74). We could go on to use term frequency–inverse document frequency (tf-idf) to make a more complex comparison between the samples. In the next post, we will apply some of the sentiment analysis ideas from the book to the dream data. Let’s save our dataset df_word for next time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;save(df_word, file = &amp;quot;df_word.Rdata&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Manipulating text data from dreams</title>
      <link>/post/manipulating-text-data-from-dreams/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/manipulating-text-data-from-dreams/</guid>
      <description>


&lt;p&gt;In the previous post on ‘pulling text data from the internet’, I experimented with pulling out the dream text from a sample of dreams from the website “DreamBank” at: &lt;a href=&#34;http://www.dreambank.net/random_sample.cgi&#34; class=&#34;uri&#34;&gt;http://www.dreambank.net/random_sample.cgi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this follow-up post, I will demonstrate some of the methods presented in Julia Silge and David Robinson’s book ‘Text Mining with R’ for processing text data, as applied to 400 dreams sampled from 4 collections in the dreambank. I used the methods described in the last post to pull out a random sample of 100 dreams from each of the following 4 groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;college_women (this was the sample used last time)&lt;/li&gt;
&lt;li&gt;hall_female&lt;/li&gt;
&lt;li&gt;hall_male&lt;/li&gt;
&lt;li&gt;vietnam_vet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first set of dreams were recorded by college women by Calvin Hall from undergraduates in a course on personality at Western Reserve University in 1947 and 1948.&lt;/p&gt;
&lt;p&gt;The second and third samples are also dreams collected by Calvin Hall and Robert L. Van de Castle, on which they based female and male norms in their book &lt;em&gt;The Content Analysis of Dreams&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The sample listed as vietnam_vet are from the dreams of an American veteran of the Vietnam war, who suffered PTSD. The website has over 400 of his dreams which he donated from records he kept not long after returning from Vietnam.&lt;/p&gt;
&lt;p&gt;Let’s begin by loading the three packages we are likely to use.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidytext)
library(stringr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to follow along with this post, the dataset I am about to load is “dream_df.csv”, which can be found on my github page: &lt;a href=&#34;https://github.com/Christian-Ryan/netsite/tree/master/public/post&#34; class=&#34;uri&#34;&gt;https://github.com/Christian-Ryan/netsite/tree/master/public/post&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_csv(&amp;quot;dreams_df.csv&amp;quot;)
df &amp;lt;- df[,2:3]
df$sample &amp;lt;- as.factor(df$sample)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After sampling the four dream sets, using the techniques described in the last post, we now have a dataframe called df with two variables - &lt;em&gt;sample&lt;/em&gt; and &lt;em&gt;dream&lt;/em&gt;. We will use our custom_view() function we created last time to display snippets of dreams neatly formatted. We can also use the &lt;em&gt;some()&lt;/em&gt; function from the car package to take a quick look at a selection of dreams across the dataframe. The &lt;em&gt;some()&lt;/em&gt; function is very like &lt;em&gt;head()&lt;/em&gt; and &lt;em&gt;tail()&lt;/em&gt;, but has the advantage of returning a selection across the dataset, which allows us to see examples from each of the samples simultaneously.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;custom_view &amp;lt;- function(x) data.frame(lapply(x, substr, 1, 56))
car::some(df) %&amp;gt;%
  custom_view()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           sample                                                    dream
## 1  college_women I dreamed about my first boyfriend whom I had gone with 
## 2  college_women I was taking an examination in writing letters which wer
## 3  college_women I dreamed I was walking in the country, over gently roll
## 4    vietnam_vet A young black woman and I discuss how to organize a gras
## 5    vietnam_vet My former girlfriend Karen wants to be a hypno-therapist
## 6      hall_male I was with a girl who may have been my wife. We were wan
## 7      hall_male I was seated in the living room of a girl (19) who has s
## 8      hall_male I was in a gym, running around and jumping. Suddenly I r
## 9      hall_male This dream has been recurrent at the rate of twice a wee
## 10   hall_female In this dream as in many I was at my home in West Va. I&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../img/tidytext.png&#34; width=&#34;25%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Julia Silge and David Robinson’s book &lt;strong&gt;Text Mining with R - A tidy approach&lt;/strong&gt; sets off at a cracking pace, at least for relatively newbies to R such as myself. They assumes a degree of familiarity with tidyverse concepts and when they introduce concepts such as tidytext format, they can sometimes address three or four steps in one example. I will unpack some of these as individual steps to illustrate what is going on, while using our dream data as the material for processing.&lt;/p&gt;
&lt;p&gt;At the moment our df only contains the sample name (a categorical variable with four values) and the text of the dream. It might be helpful to index the dreams before we tokenise the text in them. So let’s introduce a new variable that we will call dream_number. This will index each dream between 1 - 400 in the dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;-  df %&amp;gt;%
  mutate(dream_number = row_number())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the dream_number variable added, we can unnest the tokens (split the text variable into individual words). The syntax for the unnest_tokens() function is to pipe in the dataframe (df), then supply the name of the variable to be created (word), followed by the variable containing the text we are going to tokenise - in this case “dream”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word &amp;lt;- df %&amp;gt;%
  unnest_tokens(word, dream)
head(df_word)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   sample        dream_number word   
##   &amp;lt;fct&amp;gt;                &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
## 1 college_women            1 i      
## 2 college_women            1 dreamed
## 3 college_women            1 that   
## 4 college_women            1 i      
## 5 college_women            1 was    
## 6 college_women            1 in&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See that the &lt;em&gt;word&lt;/em&gt; variable has replaced our &lt;em&gt;dream&lt;/em&gt; variable and now each word is on a separate row - this is the tidytext format. &lt;em&gt;unnest_tokens()&lt;/em&gt; has kept the variables &lt;em&gt;sample&lt;/em&gt; and &lt;em&gt;dream_number&lt;/em&gt; - it only transforms the input variable (dream) into the output variable (word). Notice also that the function has transformed into lower-case all the words in the &lt;em&gt;word&lt;/em&gt; variable.&lt;/p&gt;
&lt;div id=&#34;tokenisation-and-n-grams&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tokenisation and N-Grams&lt;/h1&gt;
&lt;div id=&#34;section&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;p&gt;It should be noted that when we use unnest_tokens() we are using a range of default values. We could have specified something other than single words in our output. The default value of the token argument is ‘word’. We can change this to ‘ngram’ and use an ‘n=’ to specify how many words should be kept as a group. Let us try a quick run with 3-word tokens instead of single words to demonstrate this behaviour.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_trigrams &amp;lt;- df %&amp;gt;%
  unnest_tokens(trigrams, dream, token = &amp;quot;ngrams&amp;quot;, n = 3)
head(df_trigrams)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   sample        dream_number trigrams      
##   &amp;lt;fct&amp;gt;                &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         
## 1 college_women            1 i dreamed that
## 2 college_women            1 dreamed that i
## 3 college_women            1 that i was    
## 4 college_women            1 i was in      
## 5 college_women            1 was in the    
## 6 college_women            1 in the office&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here we have set our output variable to ‘trigrams’ and specified the token argument to be equal to ‘ngrams’, and we have saved this as a new dataframe called ‘df_trigrams’. That gives us a better sense of the nature of the text. We can also run a count on this after grouping by sample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_trigrams %&amp;gt;%
  group_by(sample) %&amp;gt;%
  count(trigrams, sort = TRUE) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 50,935 x 3
##    sample        trigrams              n
##    &amp;lt;fct&amp;gt;         &amp;lt;chr&amp;gt;             &amp;lt;int&amp;gt;
##  1 vietnam_vet   i tell him           33
##  2 hall_female   i was in             29
##  3 college_women i was in             25
##  4 vietnam_vet   the scene changes    23
##  5 college_women and i was            22
##  6 hall_female   seemed to be         19
##  7 college_women that i was           18
##  8 hall_female   that i was           17
##  9 hall_male     seemed to be         17
## 10 hall_female   and i was            16
## # … with 50,925 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can see that in the Vietnam veteran dream sample, the most common three word phrase was “I tell him”, whereas for the Hall Female and College Women the most common phrase was “I was in”. Using ngrams (units larger than one word), can be useful in exploring most frequently occurring phrases. It is notable that the phrase for the Vietnam vet was in the present tense, giving a sense of the immediacy and immersion of the dream experience, whereas those most frequent phrases of the other samples are in the past tense.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-words-bag-of-words-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Single words (Bag of words approach)&lt;/h1&gt;
&lt;p&gt;We have not removed stop-words yet as this would undermine our exploration of ngrams. But this is the next step for our df_word dataset. The &lt;em&gt;anti_join()&lt;/em&gt; function, takes two dataframes and keeps only those words that don’t occur in both dataframes. So this forms a convenient and easy way to filter out unwanted stopwords.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word &amp;lt;- df_word %&amp;gt;%
  anti_join(stop_words)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can count the words and sort them into descending order.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word %&amp;gt;%
  count(word, sort = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,331 x 2
##    word         n
##    &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;
##  1 house      133
##  2 dream      132
##  3 remember   125
##  4 car        118
##  5 people     110
##  6 girl       108
##  7 friend     101
##  8 time        95
##  9 woman       93
## 10 mother      85
## # … with 5,321 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But before we create some plots of these words, we should check for any anomalies in the &lt;em&gt;word&lt;/em&gt; variable of df_word. The sorted count is likely to give back expected results (high frequency genuine words). But there can be other text elements that we may want to filter out. This will become obvious if we count, but don’t sort.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word %&amp;gt;%
  count(word)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,331 x 2
##    word       n
##    &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1 ___        1
##  2 ______     1
##  3 00         2
##  4 1          4
##  5 1,500      1
##  6 10        13
##  7 100        3
##  8 105        1
##  9 107th      1
## 10 109        1
## # … with 5,321 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;word&lt;/em&gt; variable contains some text elements that we would not regard as words. Let’s check where the underscores came from. To do this we must go back to our original (untokenised) dataset &lt;em&gt;df&lt;/em&gt;, as we want to see the underscores in the context of the dream. We can use the &lt;em&gt;str_which()&lt;/em&gt; function to identify which dreams contain underscores, matched to the pattern &lt;code&gt;&#39;___&#39;&lt;/code&gt;. Then we can use this as an index on the df$dream variable, so that it just returns the context of the dreams with underscores. As there are three dreams with underscores, we will store this sequence of dreams and then take a look at the first one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;underscores &amp;lt;- df$dream[str_which(df$dream, pattern = &amp;quot;___&amp;quot;)]
underscores[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I dreamed about a young married couple whom I have known for a long time. They came to see us at our home. Although the home was ours, it resembled my Uncle&amp;#39;s home in C___ and yet the dream seemed to take place in C ___.. They drove up in a Model A Ford &amp;amp; parked it in the front yard. We were in the living room talking when another Model A Ford drove up &amp;amp; in it were my sister &amp;amp; a friend of mine. I went out in the front yard, got in this couple&amp;#39;s car, and started to talk to my sister. D___ my sister, asked me if I wanted to go to a play with J. She said that she and her husband weren&amp;#39;t going. I realized that I would have to go with him alone, so I refused. Then they drove away and the wife came out in the yard. She seemed perturbed at my getting into their car, so she got into the car and backed it away. The car then suddenly changed into an old-fashioned bicycle. It was at this time that I felt antagonistic towards this couple.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the pattern here seems to be that underscores are used to disguise the identity of named people in the dreams. We can choose to filter these out as they are not relevant to our analysis. But before we do this filtering, let’s also consider the numbers in the &lt;em&gt;word&lt;/em&gt; variable column - again in a bag-of-words approach one could argue that these are not words and so are irrelevant. We want to create a pattern that identifies both digits and underscores, and then use a function to transform our &lt;em&gt;word&lt;/em&gt; variable in the df_word dataframe.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-pattern-to-remove-numbers-and-underscores&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Create pattern to remove numbers and underscores&lt;/h1&gt;
&lt;p&gt;We can use the function str_subset() to identify the elements of the &lt;em&gt;word&lt;/em&gt; variable that we wish to remove. Let’s create a pattern that deals initially with the underscores and try &lt;em&gt;str_subset()&lt;/em&gt; with it. The ‘+’ is not strictly necessary here, but it illustrates that we can identify at least one underscore by this combination.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_subset(df_word$word, pattern = &amp;#39;_+&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;n__&amp;quot;    &amp;quot;y__&amp;quot;    &amp;quot;c___&amp;quot;   &amp;quot;___&amp;quot;    &amp;quot;d___&amp;quot;   &amp;quot;h___&amp;quot;   &amp;quot;a___&amp;quot;   &amp;quot;a___&amp;quot;  
##  [9] &amp;quot;h__&amp;quot;    &amp;quot;______&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has found ten instances of the underscore in the word variable. Now we want to find all the digits. We could use the regex shorthand &lt;em&gt;[\d]&lt;/em&gt; or &lt;em&gt;[:digit:]&lt;/em&gt;. Let’s use the latter first with &lt;em&gt;str_subset&lt;/em&gt; to check it works.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_subset(df_word$word, pattern = &amp;#39;[:digit:]&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;169&amp;quot;    &amp;quot;80&amp;quot;     &amp;quot;90&amp;quot;     &amp;quot;30&amp;quot;     &amp;quot;60&amp;quot;     &amp;quot;40&amp;quot;     &amp;quot;45&amp;quot;     &amp;quot;4&amp;quot;     
##   [9] &amp;quot;20&amp;quot;     &amp;quot;4&amp;quot;      &amp;quot;5&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;34&amp;quot;     &amp;quot;34&amp;quot;     &amp;quot;309&amp;quot;    &amp;quot;219&amp;quot;   
##  [17] &amp;quot;6&amp;quot;      &amp;quot;5.00&amp;quot;   &amp;quot;8&amp;quot;      &amp;quot;5&amp;quot;      &amp;quot;45&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;45&amp;quot;     &amp;quot;22&amp;quot;    
##  [25] &amp;quot;50&amp;quot;     &amp;quot;23&amp;quot;     &amp;quot;45&amp;quot;     &amp;quot;22&amp;quot;     &amp;quot;30&amp;quot;     &amp;quot;45&amp;quot;     &amp;quot;22&amp;quot;     &amp;quot;11&amp;quot;    
##  [33] &amp;quot;8&amp;quot;      &amp;quot;8&amp;quot;      &amp;quot;12&amp;quot;     &amp;quot;3rd&amp;quot;    &amp;quot;26&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;22&amp;quot;    
##  [41] &amp;quot;60&amp;quot;     &amp;quot;70&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;25&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;27&amp;quot;     &amp;quot;23&amp;quot;     &amp;quot;52&amp;quot;    
##  [49] &amp;quot;23&amp;quot;     &amp;quot;7&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;2nd&amp;quot;    &amp;quot;2nd&amp;quot;    &amp;quot;7&amp;quot;      &amp;quot;10&amp;quot;     &amp;quot;10&amp;quot;    
##  [57] &amp;quot;2&amp;quot;      &amp;quot;1&amp;quot;      &amp;quot;1&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;999&amp;quot;    &amp;quot;e1&amp;quot;     &amp;quot;10&amp;quot;     &amp;quot;2&amp;quot;     
##  [65] &amp;quot;4&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;25&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;5&amp;quot;      &amp;quot;22&amp;quot;    
##  [73] &amp;quot;20&amp;quot;     &amp;quot;8&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;6&amp;quot;      &amp;quot;8&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;8&amp;quot;      &amp;quot;30&amp;quot;    
##  [81] &amp;quot;50&amp;quot;     &amp;quot;4&amp;quot;      &amp;quot;35&amp;quot;     &amp;quot;4&amp;quot;      &amp;quot;00&amp;quot;     &amp;quot;40&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;5&amp;quot;     
##  [89] &amp;quot;10&amp;quot;     &amp;quot;2&amp;quot;      &amp;quot;80&amp;quot;     &amp;quot;45&amp;quot;     &amp;quot;48&amp;quot;     &amp;quot;55&amp;quot;     &amp;quot;22&amp;quot;     &amp;quot;40&amp;quot;    
##  [97] &amp;quot;1992&amp;quot;   &amp;quot;200&amp;quot;    &amp;quot;300&amp;quot;    &amp;quot;100&amp;quot;    &amp;quot;20s&amp;quot;    &amp;quot;30s&amp;quot;    &amp;quot;1950s&amp;quot;  &amp;quot;2001&amp;quot;  
## [105] &amp;quot;2012&amp;quot;   &amp;quot;10&amp;quot;     &amp;quot;12&amp;quot;     &amp;quot;1990s&amp;quot;  &amp;quot;50s&amp;quot;    &amp;quot;1972&amp;quot;   &amp;quot;1950s&amp;quot;  &amp;quot;800&amp;quot;   
## [113] &amp;quot;45&amp;quot;     &amp;quot;60s&amp;quot;    &amp;quot;1970&amp;quot;   &amp;quot;45&amp;quot;     &amp;quot;1960s&amp;quot;  &amp;quot;105&amp;quot;    &amp;quot;1st&amp;quot;    &amp;quot;109&amp;quot;   
## [121] &amp;quot;110&amp;quot;    &amp;quot;116&amp;quot;    &amp;quot;121&amp;quot;    &amp;quot;122&amp;quot;    &amp;quot;2001&amp;quot;   &amp;quot;2012&amp;quot;   &amp;quot;138&amp;quot;    &amp;quot;139&amp;quot;   
## [129] &amp;quot;152&amp;quot;    &amp;quot;m16&amp;quot;    &amp;quot;m60&amp;quot;    &amp;quot;59&amp;quot;     &amp;quot;2001&amp;quot;   &amp;quot;2012&amp;quot;   &amp;quot;39&amp;quot;     &amp;quot;244&amp;quot;   
## [137] &amp;quot;1200&amp;quot;   &amp;quot;207&amp;quot;    &amp;quot;208&amp;quot;    &amp;quot;209&amp;quot;    &amp;quot;211&amp;quot;    &amp;quot;214&amp;quot;    &amp;quot;215&amp;quot;    &amp;quot;216&amp;quot;   
## [145] &amp;quot;800&amp;quot;    &amp;quot;411&amp;quot;    &amp;quot;42nd&amp;quot;   &amp;quot;217&amp;quot;    &amp;quot;218&amp;quot;    &amp;quot;219&amp;quot;    &amp;quot;2am&amp;quot;    &amp;quot;123&amp;quot;   
## [153] &amp;quot;220&amp;quot;    &amp;quot;1950s&amp;quot;  &amp;quot;2&amp;quot;      &amp;quot;20&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;19&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;22&amp;quot;    
## [161] &amp;quot;8&amp;quot;      &amp;quot;27&amp;quot;     &amp;quot;3&amp;quot;      &amp;quot;1,500&amp;quot;  &amp;quot;50&amp;quot;     &amp;quot;17&amp;quot;     &amp;quot;26&amp;quot;     &amp;quot;30&amp;quot;    
## [169] &amp;quot;10&amp;quot;     &amp;quot;70&amp;quot;     &amp;quot;6&amp;quot;      &amp;quot;3&amp;quot;      &amp;quot;4&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;33&amp;quot;     &amp;quot;45&amp;quot;    
## [177] &amp;quot;4&amp;quot;      &amp;quot;12&amp;quot;     &amp;quot;12&amp;quot;     &amp;quot;160&amp;quot;    &amp;quot;10&amp;quot;     &amp;quot;11&amp;quot;     &amp;quot;85&amp;quot;     &amp;quot;22&amp;quot;    
## [185] &amp;quot;11&amp;quot;     &amp;quot;10&amp;quot;     &amp;quot;50&amp;quot;     &amp;quot;300&amp;quot;    &amp;quot;30&amp;quot;     &amp;quot;10&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;440&amp;quot;   
## [193] &amp;quot;880&amp;quot;    &amp;quot;10&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;30&amp;quot;     &amp;quot;3000&amp;quot;   &amp;quot;3&amp;quot;      &amp;quot;3&amp;quot;      &amp;quot;3&amp;quot;     
## [201] &amp;quot;11&amp;quot;     &amp;quot;12&amp;quot;     &amp;quot;12&amp;quot;     &amp;quot;2&amp;quot;      &amp;quot;13&amp;quot;     &amp;quot;26&amp;quot;     &amp;quot;8&amp;quot;      &amp;quot;30&amp;quot;    
## [209] &amp;quot;11&amp;quot;     &amp;quot;30&amp;quot;     &amp;quot;19&amp;quot;     &amp;quot;7&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;8&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;28&amp;quot;    
## [217] &amp;quot;50&amp;quot;     &amp;quot;30&amp;quot;     &amp;quot;18&amp;quot;     &amp;quot;18&amp;quot;     &amp;quot;15&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;21&amp;quot;     &amp;quot;20&amp;quot;    
## [225] &amp;quot;6&amp;quot;      &amp;quot;30&amp;quot;     &amp;quot;19&amp;quot;     &amp;quot;16&amp;quot;     &amp;quot;2&amp;quot;      &amp;quot;23&amp;quot;     &amp;quot;25&amp;quot;     &amp;quot;35&amp;quot;    
## [233] &amp;quot;40&amp;quot;     &amp;quot;25&amp;quot;     &amp;quot;5&amp;quot;      &amp;quot;3&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;23&amp;quot;     &amp;quot;50&amp;quot;     &amp;quot;3&amp;quot;     
## [241] &amp;quot;3&amp;quot;      &amp;quot;1&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;23&amp;quot;     &amp;quot;40&amp;quot;     &amp;quot;35&amp;quot;     &amp;quot;8&amp;quot;     
## [249] &amp;quot;8&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;107th&amp;quot;  &amp;quot;16&amp;quot;     &amp;quot;27&amp;quot;     &amp;quot;10&amp;quot;     &amp;quot;8&amp;quot;      &amp;quot;60&amp;quot;    
## [257] &amp;quot;21&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;50&amp;quot;     &amp;quot;2&amp;quot;      &amp;quot;11&amp;quot;     &amp;quot;15&amp;quot;     &amp;quot;11&amp;quot;     &amp;quot;17&amp;quot;    
## [265] &amp;quot;17&amp;quot;     &amp;quot;2&amp;quot;      &amp;quot;34&amp;quot;     &amp;quot;45&amp;quot;     &amp;quot;49&amp;quot;     &amp;quot;52&amp;quot;     &amp;quot;55&amp;quot;     &amp;quot;3&amp;quot;     
## [273] &amp;quot;5&amp;quot;      &amp;quot;20&amp;quot;     &amp;quot;26&amp;quot;     &amp;quot;75.00&amp;quot;  &amp;quot;2&amp;quot;      &amp;quot;6&amp;quot;      &amp;quot;27&amp;quot;     &amp;quot;3&amp;quot;     
## [281] &amp;quot;4&amp;quot;      &amp;quot;00&amp;quot;     &amp;quot;1st&amp;quot;    &amp;quot;2nd&amp;quot;    &amp;quot;3rd&amp;quot;    &amp;quot;10&amp;quot;     &amp;quot;20&amp;quot;     &amp;quot;10&amp;quot;    
## [289] &amp;quot;30&amp;quot;     &amp;quot;50&amp;quot;     &amp;quot;50&amp;quot;     &amp;quot;11,000&amp;quot; &amp;quot;1&amp;quot;      &amp;quot;48th&amp;quot;   &amp;quot;4&amp;quot;      &amp;quot;6&amp;quot;     
## [297] &amp;quot;25th&amp;quot;   &amp;quot;100&amp;quot;    &amp;quot;100&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very nicely as well. However, to use these patterns with the tidyverse pipe, it is easier to use the &lt;em&gt;fitler()&lt;/em&gt; function rather than &lt;em&gt;str_subset()&lt;/em&gt;, and since it is convenient to chain steps in the pipe, we can use two calls to &lt;em&gt;filter()&lt;/em&gt;, first by underscores and secondly by digits. And as we don’t want either of these in our dataset, we will set the “negate” argument to TRUE in both cases. An alternative method to delete the digits would be to use the capital “D” in the regex, but this way keeps our filters more uniform, both with a “negate = TRUE” argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word %&amp;gt;%
  filter(str_detect(word, pattern = &amp;quot;_&amp;quot;, negate = TRUE)) %&amp;gt;%
  filter(str_detect(word, pattern = &amp;#39;[\\d]&amp;#39;, negate = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 17,953 x 3
##    sample        dream_number word      
##    &amp;lt;fct&amp;gt;                &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     
##  1 college_women            1 dreamed   
##  2 college_women            1 office    
##  3 college_women            1 directress
##  4 college_women            1 nurses    
##  5 college_women            1 nursing   
##  6 college_women            1 school    
##  7 college_women            1 forty     
##  8 college_women            1 told      
##  9 college_women            1 results   
## 10 college_women            1 i.q       
## # … with 17,943 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-word-frequencies&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plot word frequencies&lt;/h1&gt;
&lt;p&gt;Now we have done some tidying on the dataset, we can plot the word frequencies - a simple way is to pass them through a filter so we only retain those words with a frequency greater than say n = 60. Notice we use mutate to create the new variables for the plot &lt;em&gt;word&lt;/em&gt; (in the order of frequency) and &lt;em&gt;n&lt;/em&gt;. We then filter by frequency, and pass the two new variables to the ggplot function. We also have to switch syntax at this point from the pipe ( %&amp;gt;% ) to the + sign between the layers of the ggplot() function. We flip the coordinates, as it allows us to keep the words in the horizontal aspect and makes it the plot easier to read.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word %&amp;gt;%
  count(word, sort = TRUE) %&amp;gt;%
  mutate(word = reorder(word, n)) %&amp;gt;%
  filter(n &amp;gt; 60) %&amp;gt;%
  ggplot(aes(x = word, y = n)) +
  geom_col()+
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2020-01-14-manipulating-text-data-from-dreams_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This gives us an overview of the most commonly used words in dreams recalled by all four samples. But it would be more interesting to see how the word use differs between the samples. However, we should be prepared for the possibility that the length of dreams may vary between samples. To control for this, we might want to convert our raw counts of words to proportions from the dream text. Let’s check for the variety of dream lengths by using str_count() function on our original dataset df - hence before we removed our stopwords. We will count the words in each dream and store the result in a vector called dream_lengths. The default for &lt;em&gt;str_count&lt;/em&gt; is for the function to count characters if no pattern is given to match. However, if we pass it a second argument, specifying the regex for all sequences of non-space characters, it will count words instead. The regex includes the code for any non-white space character ‘\S’, with the addition of ‘+’ sign to indicate one or more non-white space characters, and the initial escape character ‘\’ as ‘\S’ is not recognised as an escape character without it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dream_lengths &amp;lt;- str_count(df$dream, &amp;quot;\\S+&amp;quot;)
plot(dream_lengths, xlab = &amp;quot;Dream Number&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2020-01-14-manipulating-text-data-from-dreams_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a good example of the use of the plot() function with a single vector in R. The default behaviour is to plot the values of the vector against the y-axis - dream_lengths in this case, and then use the index number (ie. the order in which each value occurs in the vector) as the x value. So our x-axis simple represents the order of the dreams, or as we have named this, the dream number. We can see here the range of dream lengths with the minimum being about 35 words and the maximum around 290 words. We could take the min, max, mean and SD if we wanted to be more specific.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min(dream_lengths); max(dream_lengths); mean(dream_lengths); sd(dream_lengths)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 38&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 288&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 141.0325&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 45.09413&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a great deal of variability in the dream lengths, so proportions will be better than raw counts to represent the frequency of each word.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-word-frequencies-as-proportions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Calculating word frequencies as proportions&lt;/h1&gt;
&lt;p&gt;We will want to count proportions after stopwords are removed. We have a choice here whether we want to express the frequency of individual words by proportion of a dream or proportion of a sample. These would have different interpretations. If the texts (in our case dreams) were much longer, proportion by text might be the better way to represent the data, but I suspect proportion by dream may not be very informative. Let’s try it and see what the results look like. We will &lt;em&gt;group_by()&lt;/em&gt; dream_number so as to create proportion by dream. Then we use a summarise function to create a word count, and we use mutate to convert this to percentage. I used a second mutate to clean this up into two decimal places with the &lt;em&gt;round()&lt;/em&gt; function. Finally, we use the tidyverse equivalent of &lt;em&gt;sort()&lt;/em&gt; which is the &lt;em&gt;arrange()&lt;/em&gt; function - but because we want this to be largest-to-smallest, we also include the &lt;em&gt;desc()&lt;/em&gt; descending function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word %&amp;gt;%
  group_by(dream_number, word) %&amp;gt;%
  summarise(n = n()) %&amp;gt;%
  mutate(percent = (n / sum(n))*100) %&amp;gt;%
  mutate(percent = round(percent, 2)) %&amp;gt;%
  arrange(desc(percent)) %&amp;gt;%
  ungroup&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 15,500 x 4
##    dream_number word         n percent
##           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1            6 remember     3    21.4
##  2          358 office       5    20  
##  3          355 dog          7    19.4
##  4          381 bus          6    18.2
##  5            2 hair         3    16.7
##  6           20 bed          3    16.7
##  7           83 store        5    16.7
##  8          260 car          6    16.7
##  9          399 test         6    15.8
## 10           13 dream        2    15.4
## # … with 15,490 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in dream number 6 the word ‘remember’ accounted for 21% of the non-stopwords used. That seems like a high proportion. It might be more useful to look at the data aggregated across samples. We can change the code to group_by &lt;em&gt;sample&lt;/em&gt; instead of &lt;em&gt;dream_number&lt;/em&gt;, then recalculate the most frequently occurring words as a proportion of words by sample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_word %&amp;gt;%
  group_by(sample, word) %&amp;gt;%
  summarise(n = n()) %&amp;gt;%
  mutate(percent = (n / sum(n))*100) %&amp;gt;%
  mutate(percent = round(percent, 2)) %&amp;gt;%
  arrange(desc(percent)) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,118 x 4
##    sample        word         n percent
##    &amp;lt;fct&amp;gt;         &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 college_women remember    55    1.63
##  2 hall_male     dream       57    1.31
##  3 hall_male     car         51    1.17
##  4 hall_male     house       49    1.13
##  5 vietnam_vet   woman       64    1   
##  6 hall_female   remember    40    0.96
##  7 college_women car         32    0.95
##  8 college_women dream       32    0.95
##  9 hall_female   dream       38    0.92
## 10 hall_female   house       36    0.87
## # … with 8,108 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that for the college women, the word ‘remember’ features the most frequently across the whole sample of 100 dreams and makes up roughly 1.6% of the non-stopwords in the dreams recorded.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We have explored how to tokenise texts, do some basic text cleaning and creating counts and proportions and finally graphed the simple word counts. In the next post in this series, I will explore the dream data using a clever technique from Julia Silge and David Robinson’s book that involves the &lt;em&gt;spread()&lt;/em&gt; and &lt;em&gt;gather()&lt;/em&gt; functions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Pulling text data from the internet</title>
      <link>/post/pulling-text-data-from-the-internet/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/pulling-text-data-from-the-internet/</guid>
      <description>


&lt;p&gt;I have been working on the area of alexithymia for the last couple of years, a sub-clinical condition in which people find it difficult to identify and describe their emotions. I am currently analysing a dataset containing transcripts of interviews with people with and without alexithymia and I wanted to try out some R tools for text analysis. However, to do a blog post I needed some public data, and while mulling over which data I might use, I stumbled upon a line in &lt;strong&gt;“You are a thing and I love you”&lt;/strong&gt; - the wonderful new book on AI by Janelle Shane.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;you_look.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/You-Look-Like-Thing-Love/dp/0316525243&#34; class=&#34;uri&#34;&gt;https://www.amazon.com/You-Look-Like-Thing-Love/dp/0316525243&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;She mentions training an AI on a dream dataset available at &lt;a href=&#34;http://www.dreambank.net&#34; class=&#34;uri&#34;&gt;http://www.dreambank.net&lt;/a&gt; The website has section called “DreamBank” that allows you to search or take random samples of dreams recorded from a variety of sources. Under the Random Sample link, at: &lt;a href=&#34;http://www.dreambank.net/random_sample.cgi&#34; class=&#34;uri&#34;&gt;http://www.dreambank.net/random_sample.cgi&lt;/a&gt; one can select a dream source.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;dreamselect.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;We will need a few packages for this process - &lt;strong&gt;rvest&lt;/strong&gt; is useful for pulling data from online sources. The two text packages &lt;strong&gt;stringr&lt;/strong&gt; and &lt;strong&gt;stringi&lt;/strong&gt; offer a range of tools for managing text data. The &lt;strong&gt;tidyverse&lt;/strong&gt; will simplify the management of the dataset and &lt;strong&gt;knitr&lt;/strong&gt; is useful for managing the display of text in Rmarkdown documents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(stringr)
library(stringi)
library(tidyverse)
library(knitr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s start by taking a look at the dreams of college women from the 1940’s. We set an address for the url, then pass this as an argument to the read_html() function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- &amp;quot;http://www.dreambank.net/random_sample.cgi?series=hall_female&amp;amp;min=100&amp;amp;max=300&amp;amp;n=100&amp;quot;
page &amp;lt;- read_html(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I followed the guidance in Kwartler (&lt;strong&gt;‘Text Mining in Practice with R’&lt;/strong&gt;, 2017) and checked the field with the dream text on the webpage in Chrome using the SelectorGadget plugin. This revealed that these text fields were labelled as “span”. So we can include this as the type of node to select in the html_node() function from &lt;strong&gt;rvest&lt;/strong&gt;. This allows us to pull the html text from just these fields and store them in a new variable called posts, then I will convert this html_text to raw text and store it in a variable called dream. I suppose I could have wrapped the html_nodes call within the html_text function and skipped creating an intermediate variable (posts), but I think it makes the code more readable this way.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posts &amp;lt;- html_nodes(page, &amp;#39;span&amp;#39;)
dream &amp;lt;- html_text(posts)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can convert this to a dataframe - we will use the tidyverse version, a tibble, as this will avoid problems of the dreams being converted to factors. For more on why this can be problematic, read &lt;strong&gt;“stringsAsFactors: An unauthorized biography”&lt;/strong&gt; by Roger Peng at this site:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://simplystatistics.org/2015/07/24/stringsasfactors-an-unauthorized-biography/&#34; class=&#34;uri&#34;&gt;https://simplystatistics.org/2015/07/24/stringsasfactors-an-unauthorized-biography/&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(dream = dream)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a side-note, we could have done each of these steps with a more tidyverse syntax, by using the pipe, though this may have meant that each of the substeps was less transparent. We could have taken the pages object that contains our raw data and piped it through the various functions to extract just the dreams, then converted it into a tibble. As we haven’t declared a name for the one variable in the tibble, we need to use the rename function to assign the name ‘dream’ to the column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- page %&amp;gt;% 
  html_nodes(&amp;#39;span&amp;#39;) %&amp;gt;% 
  html_text() %&amp;gt;% 
  tibble() %&amp;gt;% 
  rename(&amp;#39;dream&amp;#39; = &amp;#39;.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a quick peak at the data. We can create a quick function to truncate the display of the dreams to 60 characters. We will call this function custom_view(). We will restrict the view to just the first 5 rows as well, using indexing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;custom_view &amp;lt;- function(x) data.frame(lapply(x, substr, 1, 60))
custom_view(df[1:5,])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                           dream
## 1 \n#0001 (Code 001, Age 24, 11/??/47)I dreamed that I was at a
## 2 \n#0008 (Code 001, Age 24, 11/??/47)I dreamed that I went to 
## 3 \n#0025 (Code 007, Age 20, 03/20/48)As I first remember the d
## 4 \n#0028 (Code 007, Age 20, 04/09/48)I was at a factory workin
## 5 \n#0036 (Code 008, Age 22, 02/25/48)I was in a house. It was&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently, our dataset has just one column and we will need to fix this. Let’s use substr to pull out the dream number that occurs at the beginning of the text field. The substr() function takes three arguments, the vector, character start and character stop.&lt;/p&gt;
&lt;p&gt;For example, this is what we get if we pull out the three numeric identifier characters (start at 4 and stop at 6).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;substr(df$dream, 4, 6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;001&amp;quot; &amp;quot;008&amp;quot; &amp;quot;025&amp;quot; &amp;quot;028&amp;quot; &amp;quot;036&amp;quot; &amp;quot;038&amp;quot; &amp;quot;049&amp;quot; &amp;quot;050&amp;quot; &amp;quot;051&amp;quot; &amp;quot;055&amp;quot; &amp;quot;059&amp;quot; &amp;quot;065&amp;quot;
##  [13] &amp;quot;074&amp;quot; &amp;quot;081&amp;quot; &amp;quot;084&amp;quot; &amp;quot;087&amp;quot; &amp;quot;098&amp;quot; &amp;quot;101&amp;quot; &amp;quot;117&amp;quot; &amp;quot;123&amp;quot; &amp;quot;137&amp;quot; &amp;quot;156&amp;quot; &amp;quot;163&amp;quot; &amp;quot;164&amp;quot;
##  [25] &amp;quot;165&amp;quot; &amp;quot;186&amp;quot; &amp;quot;190&amp;quot; &amp;quot;221&amp;quot; &amp;quot;223&amp;quot; &amp;quot;225&amp;quot; &amp;quot;226&amp;quot; &amp;quot;230&amp;quot; &amp;quot;232&amp;quot; &amp;quot;251&amp;quot; &amp;quot;261&amp;quot; &amp;quot;271&amp;quot;
##  [37] &amp;quot;278&amp;quot; &amp;quot;290&amp;quot; &amp;quot;292&amp;quot; &amp;quot;296&amp;quot; &amp;quot;301&amp;quot; &amp;quot;302&amp;quot; &amp;quot;304&amp;quot; &amp;quot;309&amp;quot; &amp;quot;310&amp;quot; &amp;quot;313&amp;quot; &amp;quot;335&amp;quot; &amp;quot;351&amp;quot;
##  [49] &amp;quot;352&amp;quot; &amp;quot;353&amp;quot; &amp;quot;356&amp;quot; &amp;quot;360&amp;quot; &amp;quot;361&amp;quot; &amp;quot;367&amp;quot; &amp;quot;368&amp;quot; &amp;quot;371&amp;quot; &amp;quot;373&amp;quot; &amp;quot;383&amp;quot; &amp;quot;384&amp;quot; &amp;quot;396&amp;quot;
##  [61] &amp;quot;402&amp;quot; &amp;quot;404&amp;quot; &amp;quot;405&amp;quot; &amp;quot;406&amp;quot; &amp;quot;408&amp;quot; &amp;quot;415&amp;quot; &amp;quot;435&amp;quot; &amp;quot;440&amp;quot; &amp;quot;460&amp;quot; &amp;quot;468&amp;quot; &amp;quot;475&amp;quot; &amp;quot;483&amp;quot;
##  [73] &amp;quot;491&amp;quot; &amp;quot;499&amp;quot; &amp;quot;503&amp;quot; &amp;quot;506&amp;quot; &amp;quot;528&amp;quot; &amp;quot;530&amp;quot; &amp;quot;537&amp;quot; &amp;quot;540&amp;quot; &amp;quot;543&amp;quot; &amp;quot;547&amp;quot; &amp;quot;550&amp;quot; &amp;quot;556&amp;quot;
##  [85] &amp;quot;563&amp;quot; &amp;quot;582&amp;quot; &amp;quot;586&amp;quot; &amp;quot;606&amp;quot; &amp;quot;609&amp;quot; &amp;quot;616&amp;quot; &amp;quot;620&amp;quot; &amp;quot;629&amp;quot; &amp;quot;641&amp;quot; &amp;quot;652&amp;quot; &amp;quot;659&amp;quot; &amp;quot;660&amp;quot;
##  [97] &amp;quot;664&amp;quot; &amp;quot;666&amp;quot; &amp;quot;667&amp;quot; &amp;quot;681&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked fine, so let’s create a new variable called code to store this data in our dataframe. This will be our id code for each dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$code &amp;lt;- substr(df$dream, 4, 6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The column with the code should come first, so we will swap the order of columns with a simple index call - concatenating the order of variables, passed as the second argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- df[,c(2,1)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After examining the dataframe, we can see that the pattern for ages is given by the word ‘Age’ with a capital ‘A’, followed by a space, then the actual age as two digits, like this: “Age 24”. We can create a regex pattern to match this and use the stringr package to extract this string and store it in a vector called age.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;age &amp;lt;- str_extract(df$dream, &amp;quot;[A][g][e][ ][0-9]{2}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we want to manipulate the ages as integers, we need to extract just the number and coerce it from a character vector into a numeric vector. We can do this with another regex, which just pulls out the two digits. And let’s convert it into a numeric and paste the data back into the dataframe, and move it to the second column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;age_refined &amp;lt;- str_extract(age, &amp;quot;([0-9]{2})&amp;quot;)
df$age &amp;lt;- as.numeric(age_refined)
df &amp;lt;- df[,c(1,3,2)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we want to tidy up the dream variable. At the moment we have a bunch of characters before the dream itself starts. We can experiment with the str_locate function and a regex to see if we can identify the pattern for where the dream begins. Let’s try the closing brace which seems to come after the date of the dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(str_locate(df$dream, &amp;quot;[)]&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      start end
## [1,]    35  35
## [2,]    35  35
## [3,]    35  35
## [4,]    35  35
## [5,]    35  35
## [6,]    35  35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This indicates that a closing brace always occurs at the 35th character in the dream text field. We can use the Base R function substr() which takes a vector, a start and an end point. We know the start (character 36), which is the first character after the closing brace of the date, but we don’t know the end, as all the dreams are different lenghts. But we can use the handy nchar() function which counts the number of characters for us, so we treat this as a flexible endpoint. As this seems to work nicely, let’s overwrite our dream variable with this new version&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$dream &amp;lt;- substr(df$dream, 36, nchar(df$dream))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick look at the df using our custom_view() function indictes this is shaping up nicely.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;custom_view(df)[1:5,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   code age                                                        dream
## 1  001  24 I dreamed that I was at a public affair but I don&amp;#39;t know whi
## 2  008  24 I dreamed that I went to take an examination and I was late 
## 3  025  20 As I first remember the dream I was upstairs in a room with 
## 4  028  20 I was at a factory working. I saw a college girl-friend of m
## 5  036  22 I was in a house. It was a beautiful large home with expensi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what about the end of each dream? Let’s examine the first dream in detail.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;I dreamed that I was at a public affair but I don&amp;#39;t know which affair&amp;quot;
##  [2] &amp;quot;it was although it was outdoors. There were many people around us and&amp;quot;
##  [3] &amp;quot;they were of all ages. I was at this affair with B. He is about&amp;quot;      
##  [4] &amp;quot;twenty-six years old and he is the boy-friend of one of the girls&amp;quot;    
##  [5] &amp;quot;that lives in the dormitory that I do. Whenever I felt the urge to&amp;quot;   
##  [6] &amp;quot;get away from my escort or from the people at the affair, I would&amp;quot;    
##  [7] &amp;quot;start to fly. (like superman). While up in the air I felt very uneasy&amp;quot;
##  [8] &amp;quot;and worried about how I would get back down without hurting myself. I&amp;quot;
##  [9] &amp;quot;left my escort about three times in this way. I do not remember why I&amp;quot;
## [10] &amp;quot;felt that I had to get away. Interpretation I do not know why I would&amp;quot;
## [11] &amp;quot;dream of B. I do not know him very well and I do not feel very&amp;quot;       
## [12] &amp;quot;friendly toward him when I do see him. I believe that I associated&amp;quot;   
## [13] &amp;quot;him with my studies and felt that I had to get away for a short&amp;quot;      
## [14] &amp;quot;while. When I had this dream, I hadn&amp;#39;t been home for about eight&amp;quot;     
## [15] &amp;quot;weeks and was looking forward to going home. I felt that I wanted a&amp;quot;  
## [16] &amp;quot;short vacation from my studies and this dream was an escape mechanism&amp;quot;
## [17] &amp;quot;in the form of a fantasy to get away from my classes for a short&amp;quot;     
## [18] &amp;quot;while. Answers to questions 2. Frustrated. I felt that I had to get&amp;quot;  
## [19] &amp;quot;away.3. actual participant4. unpleasant5. Vague, but it was&amp;quot;          
## [20] &amp;quot;outdoors.6. No.7. No. (268 words)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that each dream includes an interpretation and I only want to analyse the dream narrative itself, not the person’s reflections on the meaning of the dream. We can use the word ‘Interpretation’ to identify the end point of the dream narrative. We can just pull out the first 6 values by wrapping this in the head function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(str_locate(df$dream, &amp;quot;Interpretation&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      start end
## [1,]   643 656
## [2,]   722 735
## [3,]   642 655
## [4,]   306 319
## [5,]   415 428
## [6,]   327 340&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We still need to do a bit of work - the str_locate() returns two values and we only want the first one. Secondly, when we trim the text, we want to start two characters to the left as we don’t want the first letter of the word “Interpretation”, or the whitespace just before it. We can store the location in a new vector called loc - then we can take out the start point only, with the index [,1]. On the third line we will crop the text to start at 0 and end at 2 characters to the left (-2) of the start point. We reassign it to the same variable in our dataframe - df$dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loc &amp;lt;- str_locate(df$dream, &amp;quot;Interpretation&amp;quot;)
start &amp;lt;- loc[,1] # take out start point [,1] as a vector called start
df$dream &amp;lt;- substr(df$dream, 0, start-2) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s check that the changes worked by examining the final 70 characters of the first dream.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;is way. I do not remember why I felt that I had to get away.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just what we wanted - this is line 9 and 10 of the full dream we examined up above - finishing just before the interpretation starts.&lt;/p&gt;
&lt;p&gt;In the next post, I will pull in the dreams from three other samples and start to look at the sentiment analysis of the dream content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plotting multiple histograms on the same graph</title>
      <link>/post/plotting-multiple-histograms-on-the-same-graph/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/plotting-multiple-histograms-on-the-same-graph/</guid>
      <description>


&lt;p&gt;Recently, while trying to compare the distribution of two samples, I discovered that you can plot both on the same graph in base R, which is a nice feature if you just want to examine the data quickly. We can explore this with a psychological dataset from the Open Psychometrics site. This hosts a range of open psychometric tests and stores the data in an accessible form. Let’s pull out the data for the Rosenberg Self-Esteem Scale (note that there are two different scoring methods in common use on this scale - on the website they have used a 1 - 4 Likert scale for the data output as a csv, but it is not unusual to see the use of a 0 - 3 scale, (which is the method used to give participants on the website feedback) so we need to be cautious when comparing these total scores with published norms (see &lt;a href=&#34;https://socy.umd.edu/about-us/using-rosenberg-self-esteem-scale&#34; class=&#34;uri&#34;&gt;https://socy.umd.edu/about-us/using-rosenberg-self-esteem-scale&lt;/a&gt;)).&lt;/p&gt;
&lt;p&gt;First we will load two packages we are going to use. We want the &lt;strong&gt;tidyverse&lt;/strong&gt; for manipulating the variables and we will use the &lt;strong&gt;psych&lt;/strong&gt; package for creating total scores on the measure itself.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(psych)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we want to set an url object to direct the download.file() to the right place to pull the data. I have called it &lt;em&gt;my_url&lt;/em&gt; for simplicity. We pass this as the first argument in the download.file() function. We then set a destination for the file to be saved with the &lt;em&gt;dest&lt;/em&gt; argument. Finally we use unzip to unpack the zipped file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_url &amp;lt;- &amp;quot;http://openpsychometrics.org/_rawdata/RSE.zip&amp;quot;
download.file(url = my_url, dest=&amp;quot;data.zip&amp;quot;, mode=&amp;quot;wb&amp;quot;) 
unzip (&amp;quot;data.zip&amp;quot;, exdir = &amp;quot;./&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can import the data with the read_tsv() function. We can’t use the read_csv() function with the data, because despite having a .csv extension, the data is actually tab-separated not comma-separated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_tsv(&amp;quot;RSE/data.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Rosenberg Self-Esteem scale Items 2, 5, 6, 8, 9 are normally reverse scored. However, whoever loaded the questions on the website put them in a different order, with items 3, 5, 8, 9, 10 needing reversing. We need to create a total score for the measure and to be mindful of the reverse coded items. The &lt;em&gt;psych&lt;/em&gt; package provides a function for this called scoreFast. We need to pass it a list called keys.list which specifies the direction of each item in turn (items are scored as-is if they have no leading ‘-’ minus sign, but all items with a minus are reverse scored). We won’t bother recoding the data from the 1 - 4 scale to 0 - 3 as it makes little difference for your graphs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;keys.list &amp;lt;- list(c(&amp;#39;Q1&amp;#39;, &amp;#39;Q2&amp;#39;, &amp;#39;-Q3&amp;#39;, &amp;#39;Q4&amp;#39;, &amp;#39;-Q5&amp;#39;, &amp;#39;Q6&amp;#39;, &amp;#39;Q7&amp;#39;, &amp;#39;-Q8&amp;#39;, &amp;#39;-Q9&amp;#39;, &amp;#39;-Q10&amp;#39;))
df$total &amp;lt;- scoreFast(keys.list, items = df[1:10], totals = TRUE, min = 1, max = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have our dataset, we can look at comparing distributions. We might want to know if the distribution of self-esteem scores differs between men and women. Checking the codebook on the website, we can see that males are coded as ‘1’ and females as ‘2’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;men &amp;lt;- df %&amp;gt;% 
  filter(gender == 1)
women &amp;lt;- df %&amp;gt;% 
  filter(gender == 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let’s plot the total self-esteem scores for the women in the sample as a simple histogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(women$total)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2019-10-12-plotting-multiple-histograms-on-the-same-graph_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt; We can see a fairly normal distribution of scores. We can check the mean, but we might predict it is around 25.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(women$total)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 25.74368&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we can add the men’s scores to the same plot. Here we simply create the first plot, then make a second plot with the argument &lt;strong&gt;add&lt;/strong&gt; set to TRUE. We will set the density to 35 so we can see throught the bars on the histogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(women$total, col = &amp;#39;red&amp;#39;, main = &amp;quot;Histogram of Total scores on Rosenberg Self-Esteem Scale&amp;quot;, xlab = &amp;quot;Total score&amp;quot;)
hist(men$total, add = TRUE, col = &amp;#39;blue&amp;#39;, density = 35)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2019-10-12-plotting-multiple-histograms-on-the-same-graph_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I have used the pipe to separate my data into individual gender dataframes, but this is only one way to do it, and I do find this code very easy to read. However, we could have done the same thing using a traditional R approach of indexing instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(df$total[df$gender== 2], col = &amp;#39;orchid&amp;#39;, main = &amp;quot;Histogram of Total scores on Rosenberg Self-Esteem Scale&amp;quot;, xlab = &amp;quot;Total score&amp;quot;)
hist(df$total[df$gender==1], add = TRUE, col = &amp;#39;royalblue&amp;#39;, density = 40)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2019-10-12-plotting-multiple-histograms-on-the-same-graph_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have seen the distributions, we might wonder if the sexes differ on the measure of self-esteem. Let’s run a quick t-test to see.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(men$total, women$total)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  men$total and women$total
## t = 23.785, df = 37496, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  1.436304 1.694284
## sample estimates:
## mean of x mean of y 
##  27.30897  25.74368&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes they do! With men having a significantly higher mean score on self-esteem (though the absolute difference is quite small.)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
