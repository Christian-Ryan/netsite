<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R coding | Christian Ryan</title>
    <link>/categories/r-coding/</link>
      <atom:link href="/categories/r-coding/index.xml" rel="self" type="application/rss+xml" />
    <description>R coding</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 30 Nov 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>R coding</title>
      <link>/categories/r-coding/</link>
    </image>
    
    <item>
      <title>Pulling text data from the internet</title>
      <link>/post/pulling-text-data-from-the-internet/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/pulling-text-data-from-the-internet/</guid>
      <description>


&lt;p&gt;I have been working on the area of alexithymia for the last couple of years, a sub-clinical condition in which people find it difficult to identify and describe their emotions. I am currently analysing a dataset containing transcripts of interviews with people with and without alexithymia and I wanted to try out some R tools for text analysis. However, to do a blog post I needed some public data, and while mulling over what data I might use, I stumbled upon a line in ‘You are a thing and I love you’ - the wonderful new book on AI by Janelle Shane. She mentions training an AI on a dream dataset available at dreamreasearch.net. The website has section called “DreamBank” that allows you to search or take random samples of dreams recorded from a variety of sources. Under the Random Sample link, at: &lt;a href=&#34;http://www.dreambank.net/random_sample.cgi&#34; class=&#34;uri&#34;&gt;http://www.dreambank.net/random_sample.cgi&lt;/a&gt; one can select a dream source.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;dreamselect.png&#34; alt=&#34;Image from dream website&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Image from dream website&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We will need a few packages for this process - &lt;strong&gt;rvest&lt;/strong&gt; is useful for pulling data from online sources. The two text packages &lt;strong&gt;stringr&lt;/strong&gt; and &lt;strong&gt;stringi&lt;/strong&gt; offer a range of tools for managing text data. The &lt;strong&gt;tidyverse&lt;/strong&gt; will simplify the management of the dataset and &lt;strong&gt;knitr&lt;/strong&gt; is useful for managing the display of text in Rmarkdown documents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(stringr)
library(stringi)
library(tidyverse)
library(knitr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s start by taking a look at the dreams of college women from the 1940’s. We set an address for the url, then pass this as an argument to the read_html() function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- &amp;quot;http://www.dreambank.net/random_sample.cgi?series=hall_female&amp;amp;min=100&amp;amp;max=300&amp;amp;n=100&amp;quot;
page &amp;lt;- read_html(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I followed the instructions in Kwartler (‘Text Mining in Practice with R’, 2017) and checking the field with the dream text on the webpage in Chrome, with the SelectorGadget, it revealed that these fields were labelled as “span”. So we can include this as the type of node to select in the html_node() function from &lt;strong&gt;rvest&lt;/strong&gt;. This allows us to pull the html text from these fields and store them in a new variable called posts. Then to convert this html_text to raw text and store it in a new variable called dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posts &amp;lt;- html_nodes(page, &amp;#39;span&amp;#39;)
dream &amp;lt;- html_text(posts)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can convert this to a dataframe - we will use the tidyverse version, a tibble, as this will avoid problems of the dreams being converted to factors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(dream = dream)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a quick peak at the data. We can create a quick function to truncate the display of the dreams to 60 characters. We will call this function custom_view(). We will restrict the view to just the first 5 rows as well, using indexing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;custom_view &amp;lt;- function(x) data.frame(lapply(x, substr, 1, 60))
custom_view(df[1:5,])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                           dream
## 1 \n#0001 (Code 001, Age 24, 11/??/47)I dreamed that I was at a
## 2 \n#0008 (Code 001, Age 24, 11/??/47)I dreamed that I went to 
## 3 \n#0025 (Code 007, Age 20, 03/20/48)As I first remember the d
## 4 \n#0028 (Code 007, Age 20, 04/09/48)I was at a factory workin
## 5 \n#0036 (Code 008, Age 22, 02/25/48)I was in a house. It was&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently, our dataset has just one column and we will need to fix this. Let’s use substr to pull out the dream number that occurs at the beginning of the text field. The substr() function takes three arguments, the vector, character start and character stop.&lt;/p&gt;
&lt;p&gt;For example, this is what we get if we pull out the three numeric identifier characters (start at 4 and stop at 6).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;substr(df$dream, 4, 6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;001&amp;quot; &amp;quot;008&amp;quot; &amp;quot;025&amp;quot; &amp;quot;028&amp;quot; &amp;quot;036&amp;quot; &amp;quot;038&amp;quot; &amp;quot;049&amp;quot; &amp;quot;050&amp;quot; &amp;quot;051&amp;quot; &amp;quot;055&amp;quot; &amp;quot;059&amp;quot; &amp;quot;065&amp;quot;
##  [13] &amp;quot;074&amp;quot; &amp;quot;081&amp;quot; &amp;quot;084&amp;quot; &amp;quot;087&amp;quot; &amp;quot;098&amp;quot; &amp;quot;101&amp;quot; &amp;quot;117&amp;quot; &amp;quot;123&amp;quot; &amp;quot;137&amp;quot; &amp;quot;156&amp;quot; &amp;quot;163&amp;quot; &amp;quot;164&amp;quot;
##  [25] &amp;quot;165&amp;quot; &amp;quot;186&amp;quot; &amp;quot;190&amp;quot; &amp;quot;221&amp;quot; &amp;quot;223&amp;quot; &amp;quot;225&amp;quot; &amp;quot;226&amp;quot; &amp;quot;230&amp;quot; &amp;quot;232&amp;quot; &amp;quot;251&amp;quot; &amp;quot;261&amp;quot; &amp;quot;271&amp;quot;
##  [37] &amp;quot;278&amp;quot; &amp;quot;290&amp;quot; &amp;quot;292&amp;quot; &amp;quot;296&amp;quot; &amp;quot;301&amp;quot; &amp;quot;302&amp;quot; &amp;quot;304&amp;quot; &amp;quot;309&amp;quot; &amp;quot;310&amp;quot; &amp;quot;313&amp;quot; &amp;quot;335&amp;quot; &amp;quot;351&amp;quot;
##  [49] &amp;quot;352&amp;quot; &amp;quot;353&amp;quot; &amp;quot;356&amp;quot; &amp;quot;360&amp;quot; &amp;quot;361&amp;quot; &amp;quot;367&amp;quot; &amp;quot;368&amp;quot; &amp;quot;371&amp;quot; &amp;quot;373&amp;quot; &amp;quot;383&amp;quot; &amp;quot;384&amp;quot; &amp;quot;396&amp;quot;
##  [61] &amp;quot;402&amp;quot; &amp;quot;404&amp;quot; &amp;quot;405&amp;quot; &amp;quot;406&amp;quot; &amp;quot;408&amp;quot; &amp;quot;415&amp;quot; &amp;quot;435&amp;quot; &amp;quot;440&amp;quot; &amp;quot;460&amp;quot; &amp;quot;468&amp;quot; &amp;quot;475&amp;quot; &amp;quot;483&amp;quot;
##  [73] &amp;quot;491&amp;quot; &amp;quot;499&amp;quot; &amp;quot;503&amp;quot; &amp;quot;506&amp;quot; &amp;quot;528&amp;quot; &amp;quot;530&amp;quot; &amp;quot;537&amp;quot; &amp;quot;540&amp;quot; &amp;quot;543&amp;quot; &amp;quot;547&amp;quot; &amp;quot;550&amp;quot; &amp;quot;556&amp;quot;
##  [85] &amp;quot;563&amp;quot; &amp;quot;582&amp;quot; &amp;quot;586&amp;quot; &amp;quot;606&amp;quot; &amp;quot;609&amp;quot; &amp;quot;616&amp;quot; &amp;quot;620&amp;quot; &amp;quot;629&amp;quot; &amp;quot;641&amp;quot; &amp;quot;652&amp;quot; &amp;quot;659&amp;quot; &amp;quot;660&amp;quot;
##  [97] &amp;quot;664&amp;quot; &amp;quot;666&amp;quot; &amp;quot;667&amp;quot; &amp;quot;681&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked fine, so lets create a new variable called code to store this data in our dataframe. This will be our id code for each dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$code &amp;lt;- substr(df$dream, 4, 6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The column with the code should come first, so we will swap the order of columns with a simple index call - concatenating the order of variables, passed as the second argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- df[,c(2,1)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After examining the dataframe, we can see that the pattern for ages is given by the word ‘Age’ with a capital ‘A’, followed by a space, then the actual age as two digits, like this: “Age 24”. We can create a regex pattern to match this and use the stringr package to extract this string and store it in a vector called age.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;age &amp;lt;- str_extract(df$dream, &amp;quot;([A][g][e][ ][0-9]{2})&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we want to manipulate the ages as integers, we need to extract just the number and coerce it from a charcater vector into a numeric vector. We can do this with another regex, which just pulls out the two digits. And let’s convert it into a numeric and paste the data back into the dataframe, and move it to the second column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;age_refined &amp;lt;- str_extract(age, &amp;quot;([0-9]{2})&amp;quot;)
df$age &amp;lt;- as.numeric(age_refined)
df &amp;lt;- df[,c(1,3,2)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we want to tidy up the dream variable. At the moment we have a bunch of characters before the dream itself starts. We can experiment with the str_locate function and a regex to see if we can identify the pattern for where the dream begins. Let’s try the closing brace which seems to come after the date of the dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(str_locate(df$dream, &amp;quot;[)]&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      start end
## [1,]    35  35
## [2,]    35  35
## [3,]    35  35
## [4,]    35  35
## [5,]    35  35
## [6,]    35  35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This indicates that a closing brace always occurs at the 35th character in the dream text field. We can use the Base R function substr() which takes a vector, a start and an end point. We know the start (character 36), which is the first character after the closing brace of the date, but we don’t know the end, as all the dreams are different lenghts. But we can use the handy nchar() function which counts the number of characters for us, so we treat this as a flexible endpoint. As this seems to work nicely, let’s overwrite our dream variable with this new version&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$dream &amp;lt;- substr(df$dream, 36, nchar(df$dream))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick look at the df using our custom_view() function indictes this is shaping up nicely.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;custom_view(df)[1:5,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   code age                                                        dream
## 1  001  24 I dreamed that I was at a public affair but I don&amp;#39;t know whi
## 2  008  24 I dreamed that I went to take an examination and I was late 
## 3  025  20 As I first remember the dream I was upstairs in a room with 
## 4  028  20 I was at a factory working. I saw a college girl-friend of m
## 5  036  22 I was in a house. It was a beautiful large home with expensi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what about the end of each dream? Let’s examine the first dream in detail.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;I dreamed that I was at a public affair but I don&amp;#39;t know which affair&amp;quot;
##  [2] &amp;quot;it was although it was outdoors. There were many people around us and&amp;quot;
##  [3] &amp;quot;they were of all ages. I was at this affair with B. He is about&amp;quot;      
##  [4] &amp;quot;twenty-six years old and he is the boy-friend of one of the girls&amp;quot;    
##  [5] &amp;quot;that lives in the dormitory that I do. Whenever I felt the urge to&amp;quot;   
##  [6] &amp;quot;get away from my escort or from the people at the affair, I would&amp;quot;    
##  [7] &amp;quot;start to fly. (like superman). While up in the air I felt very uneasy&amp;quot;
##  [8] &amp;quot;and worried about how I would get back down without hurting myself. I&amp;quot;
##  [9] &amp;quot;left my escort about three times in this way. I do not remember why I&amp;quot;
## [10] &amp;quot;felt that I had to get away. Interpretation I do not know why I would&amp;quot;
## [11] &amp;quot;dream of B. I do not know him very well and I do not feel very&amp;quot;       
## [12] &amp;quot;friendly toward him when I do see him. I believe that I associated&amp;quot;   
## [13] &amp;quot;him with my studies and felt that I had to get away for a short&amp;quot;      
## [14] &amp;quot;while. When I had this dream, I hadn&amp;#39;t been home for about eight&amp;quot;     
## [15] &amp;quot;weeks and was looking forward to going home. I felt that I wanted a&amp;quot;  
## [16] &amp;quot;short vacation from my studies and this dream was an escape mechanism&amp;quot;
## [17] &amp;quot;in the form of a fantasy to get away from my classes for a short&amp;quot;     
## [18] &amp;quot;while. Answers to questions 2. Frustrated. I felt that I had to get&amp;quot;  
## [19] &amp;quot;away.3. actual participant4. unpleasant5. Vague, but it was&amp;quot;          
## [20] &amp;quot;outdoors.6. No.7. No. (268 words)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that each dream includes an interpretation and I only want to analyse the dream narrative itself, not the person’s reflections on the meaning of the dream. We can use the word ‘Interpretation’ to identify the end point of the dream narrative. We can just pull out the first 6 values by wrapping this in the head function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(str_locate(df$dream, &amp;quot;Interpretation&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      start end
## [1,]   643 656
## [2,]   722 735
## [3,]   642 655
## [4,]   306 319
## [5,]   415 428
## [6,]   327 340&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We still need to do a bit of work - the str_locate() returns two values and we only want the first one. Secondly, when we trim the text, we want to start two characters to the left as we don’t want the first letter of the word “Interpretation”, or the whitespace just before it. We can store the location in a new vector called loc - then we can take out the start point only, with the index [,1]. On the third line we will crop the text to start at 0 and end at 2 characters to the left (-2) of the start point. We reassign it to the same variable in our dataframe - df$dream.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loc &amp;lt;- str_locate(df$dream, &amp;quot;Interpretation&amp;quot;)
start &amp;lt;- loc[,1] # take out start point [,1] as a vector called start
df$dream &amp;lt;- substr(df$dream, 0, start-2) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s check that the changes worked by examining the final 70 characters of the first dream.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;is way. I do not remember why I felt that I had to get away.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just what we wanted. In the next post, I will pull in the dreams from three other samples and start to look at the sentiment analysis of the dream content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plotting multiple histograms on the same graph</title>
      <link>/post/plotting-multiple-histograms-on-the-same-graph/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/plotting-multiple-histograms-on-the-same-graph/</guid>
      <description>


&lt;p&gt;Recently, while trying to compare the distribution of two samples, I discovered that you can plot both on the same graph in base R, which is a nice feature if you just want to examine the data quickly. We can explore this with a psychological dataset from the Open Psychometrics site. This hosts a range of open psychometric tests and stores the data in an accessible form. Let’s pull out the data for the Rosenberg Self-Esteem Scale (note that there are two different scoring methods in common use on this scale - on the website they have used a 1 - 4 Likert scale for the data output as a csv, but it is not unusual to see the use of a 0 - 3 scale, (which is the method used to give participants on the website feedback) so we need to be cautious when comparing these total scores with published norms (see &lt;a href=&#34;https://socy.umd.edu/about-us/using-rosenberg-self-esteem-scale&#34; class=&#34;uri&#34;&gt;https://socy.umd.edu/about-us/using-rosenberg-self-esteem-scale&lt;/a&gt;)).&lt;/p&gt;
&lt;p&gt;First we will load two packages we are going to use. We want the &lt;strong&gt;tidyverse&lt;/strong&gt; for manipulating the variables and we will use the &lt;strong&gt;psych&lt;/strong&gt; package for creating total scores on the measure itself.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(psych)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we want to set an url object to direct the download.file() to the right place to pull the data. I have called it &lt;em&gt;my_url&lt;/em&gt; for simplicity. We pass this as the first argument in the download.file() function. We then set a destination for the file to be saved with the &lt;em&gt;dest&lt;/em&gt; argument. Finally we use unzip to unpack the zipped file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_url &amp;lt;- &amp;quot;http://openpsychometrics.org/_rawdata/RSE.zip&amp;quot;
download.file(url = my_url, dest=&amp;quot;data.zip&amp;quot;, mode=&amp;quot;wb&amp;quot;) 
unzip (&amp;quot;data.zip&amp;quot;, exdir = &amp;quot;./&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can import the data with the read_tsv() function. We can’t use the read_csv() function with the data, because despite having a .csv extension, the data is actually tab-separated not comma-separated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_tsv(&amp;quot;RSE/data.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Rosenberg Self-Esteem scale Items 2, 5, 6, 8, 9 are normally reverse scored. However, whoever loaded the questions on the website put them in a different order, with items 3, 5, 8, 9, 10 needing reversing. We need to create a total score for the measure and to be mindful of the reverse coded items. The &lt;em&gt;psych&lt;/em&gt; package provides a function for this called scoreFast. We need to pass it a list called keys.list which specifies the direction of each item in turn (items are scored as-is if they have no leading ‘-’ minus sign, but all items with a minus are reverse scored). We won’t bother recoding the data from the 1 - 4 scale to 0 - 3 as it makes little difference for your graphs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;keys.list &amp;lt;- list(c(&amp;#39;Q1&amp;#39;, &amp;#39;Q2&amp;#39;, &amp;#39;-Q3&amp;#39;, &amp;#39;Q4&amp;#39;, &amp;#39;-Q5&amp;#39;, &amp;#39;Q6&amp;#39;, &amp;#39;Q7&amp;#39;, &amp;#39;-Q8&amp;#39;, &amp;#39;-Q9&amp;#39;, &amp;#39;-Q10&amp;#39;))
df$total &amp;lt;- scoreFast(keys.list, items = df[1:10], totals = TRUE, min = 1, max = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have our dataset, we can look at comparing distributions. We might want to know if the distribution of self-esteem scores differs between men and women. Checking the codebook on the website, we can see that males are coded as ‘1’ and females as ‘2’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;men &amp;lt;- df %&amp;gt;% 
  filter(gender == 1)
women &amp;lt;- df %&amp;gt;% 
  filter(gender == 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let’s plot the total self-esteem scores for the women in the sample as a simple histogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(women$total)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2019-10-12-plotting-multiple-histograms-on-the-same-graph_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt; We can see a fairly normal distribution of scores. We can check the mean, but we might predict it is around 25.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(women$total)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 25.74368&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we can add the men’s scores to the same plot. Here we simply create the first plot, then make a second plot with the argument &lt;strong&gt;add&lt;/strong&gt; set to TRUE. We will set the density to 35 so we can see throught the bars on the histogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(women$total, col = &amp;#39;red&amp;#39;, main = &amp;quot;Histogram of Total scores on Rosenberg Self-Esteem Scale&amp;quot;, xlab = &amp;quot;Total score&amp;quot;)
hist(men$total, add = TRUE, col = &amp;#39;blue&amp;#39;, density = 35)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2019-10-12-plotting-multiple-histograms-on-the-same-graph_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I have used the pipe to separate my data into individual gender dataframes, but this is only one way to do it, and I do find this code very easy to read. However, we could have done the same thing using a traditional R approach of indexing instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(df$total[df$gender== 2], col = &amp;#39;orchid&amp;#39;, main = &amp;quot;Histogram of Total scores on Rosenberg Self-Esteem Scale&amp;quot;, xlab = &amp;quot;Total score&amp;quot;)
hist(df$total[df$gender==1], add = TRUE, col = &amp;#39;royalblue&amp;#39;, density = 40)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2019-10-12-plotting-multiple-histograms-on-the-same-graph_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have seen the distributions, we might wonder if the sexes differ on the measure of self-esteem. Let’s run a quick t-test to see.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(men$total, women$total)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  men$total and women$total
## t = 23.785, df = 37496, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  1.436304 1.694284
## sample estimates:
## mean of x mean of y 
##  27.30897  25.74368&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes they do! With men having a significantly higher mean score on self-esteem (though the absolute difference is quite small.)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
